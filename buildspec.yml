version: 0.2
env:
  variables:
    IMAGE: python-flask
    VERSION: 1.1
    REPOSITORY: 890913392175.dkr.ecr.us-east-1.amazonaws.com

phases:
  pre_build:
    on-failure: ABORT
    commands:
      - echo "1. Logging in to docker registry using Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY
  build:
    on-failure: ABORT
    commands:
      - echo "2. Building the Docker image..."
      - docker build -t $REPOSITORY/$IMAGE:$VERSION.$CODEBUILD_BUILD_NUMBER -t $REPOSITORY/$IMAGE:latest .
      - echo "3. Execute the Docker image..."
      - docker run --name flask_container -id $REPOSITORY/$IMAGE:latest
      - sleep 5s
      - echo "4. Testing started with Docker container..."
      - docker exec -i flask_container curl "http://localhost" > output.html
      - export TESTING_OUTPUT=$(grep -ci "$TESTING_PARAMETER" output.html)
      - if [ $TESTING_OUTPUT -eq "0" ]; then exit 1; else echo "5. Testing finished SUCCESSFULLY!"; fi
    finally:
      - docker images
      - docker ps
      - cat output.html
      - echo "TESTING_OUTPUT variable is $TESTING_OUTPUT"
  post_build:
    on-failure: ABORT
    commands:
      - echo "6. Pushing the Docker image to Amazon ECR..."
      - docker push --all-tags $REPOSITORY/$IMAGE
      - printf '[{"name":"%s","imageUri":"%s"}]' $IMAGE $REPOSITORY/$IMAGE:$VERSION.$CODEBUILD_BUILD_NUMBER > imagedefinitions.json
artifacts:
    files: imagedefinitions.json